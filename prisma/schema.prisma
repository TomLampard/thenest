// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
    provider          = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_URL")
    relationMode      = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String? @db.Text
    id_token          String? @db.Text
    session_state     String? @db.Text
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    nickname      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    bio           String?   @db.Text
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    likedPosts    Liked[]
    files         File[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model File {
    id        String    @id @default(cuid())
    filename  String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id])
    userId    String    @unique
    post      Post?
    postId    String
    comment   Comment[]
}

model Post {
    id          String    @id @default(cuid())
    title       String    @db.VarChar(255)
    content     String    @db.Text
    contentHtml String?   @db.Text
    hidden      Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    likedBy     Liked[]
    comments    Comment[]
    file        File?     @relation(fields: [fileId], references: [id])
    fileId      String    @unique

    @@index([fileId])
    @@index([authorId])
    @@fulltext([title, content])
}

model Liked {
    id        String   @id @default(cuid())
    post      Post?    @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    postId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId    String
    comment   Comment?
    commentId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([postId])
    @@index([userId])
}

model Comment {
    id          Int      @id @default(autoincrement())
    content     String   @db.Text
    contentHtml String   @db.Text
    createdAt   DateTime @default(now())
    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId      String
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    File        File?    @relation(fields: [fileId], references: [id])
    fileId      String?
    like        Liked?   @relation(fields: [likeId], references: [id])
    likeId      String   @unique

    @@index([authorId])
    @@index([postId])
    @@index([fileId])
    @@index([likeId])
}
